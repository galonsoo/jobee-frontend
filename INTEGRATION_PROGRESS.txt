================================================================================
  JOBEE - BACKEND-FRONTEND INTEGRATION GUIDE
================================================================================

Last Updated: October 15, 2025
Branch: feat/backend-integration
Status: âœ… COMPLETE AND FUNCTIONAL

================================================================================
TABLE OF CONTENTS
================================================================================

1. Project Overview
2. What Was Implemented
3. Technical Changes (File by File)
4. How to Run the Full Stack
5. Testing the Integration
6. Future Improvements

================================================================================
1. PROJECT OVERVIEW
================================================================================

GOAL:
Integrate jobee-backend with jobee-frontend to create a functional MVP where
users and companies can register, login, create profiles, view courses, and
interact with real data from a MySQL database.

STACK:
- Frontend: React 19 + Vite 7 + Tailwind CSS 4
- Backend: Node.js 18 + Express 4 + Prisma 6
- Database: MySQL 8.0 (running in Docker)
- Auth: JWT + bcryptjs

KEY PRINCIPLE:
Modify the backend as little as possible. All integration logic lives in the
frontend.

================================================================================
2. WHAT WAS IMPLEMENTED
================================================================================

PHASE 1: INFRASTRUCTURE âœ…
- Created API utility functions (src/utils/api.js)
- Created auth utility functions (src/utils/auth.js)
- Created ProtectedRoute component for route protection
- Integrated login/signup pages with backend
- Protected all private routes

PHASE 2: UI/UX WITH TAILWIND CSS âœ…
- Redesigned UserDashboard with professional Tailwind styling
- Redesigned CompanyDashboard with professional Tailwind styling
- Consistent navigation across all pages
- Eliminated all inline styles

PHASE 3: COURSES INTEGRATION âœ…
- Connected UserCourses to GET /api/course/
- Connected CompanyCourses to backend
- Added loading states, error handling, empty states

PHASE 4: PROFILE MANAGEMENT âœ…
- UserProfile: create/edit Person profiles
- CompanyProfile: create/edit Company profiles
- Auto-detection of existing profiles
- Full CRUD functionality

PHASE 5: LISTINGS âœ…
- UserCompany: list all companies from backend
- CompanyUsers: UI placeholder (no backend endpoint yet)

PHASE 6: MESSAGING (PLACEHOLDER) âœ…
- UserContacts and CompanyContacts with professional UI
- "Coming Soon" message for future implementation

PHASE 7: DATABASE SETUP âœ…
- MySQL 8.0 running in Docker container
- Prisma schema synced with database (13 tables)
- Backend connection established

TOTAL: 10 pages fully integrated + database configured

================================================================================
3. TECHNICAL CHANGES (FILE BY FILE)
================================================================================

FRONTEND CHANGES:
-----------------

ðŸ“„ src/utils/api.js (NEW FILE)
  What: HTTP request wrapper for backend communication
  Why: Centralizes API calls, auto-includes JWT token, handles errors
  How:
    - Base URL: http://localhost:3000/api
    - Automatically adds Authorization header if token exists
    - Returns parsed JSON or throws error
  Usage:
    apiFetch('/auth/login', { method: 'POST', body: { email, password } })

ðŸ“„ src/utils/auth.js (NEW FILE)
  What: Authentication utilities
  Why: Centralizes session management
  Functions:
    - saveSession(token, user) - Store token + user in localStorage
    - getToken() - Retrieve token
    - getUser() - Retrieve user data
    - isAuthenticated() - Check if token exists
    - logout() - Clear session

ðŸ“„ src/components/common/ProtectedRoute.jsx (NEW FILE)
  What: Wrapper component for private routes
  Why: Redirects to login if no token exists
  How: Checks isAuthenticated(), redirects to /auth/login if false

ðŸ“„ src/pages/auth/LoginPage.jsx (MODIFIED)
  Before: Direct fetch to backend
  After: Uses apiFetch() and saveSession()
  Changes:
    - Import apiFetch and saveSession
    - Call apiFetch('/auth/login', { method: 'POST', body: {...} })
    - Save session on success
    - Redirect to /user/dashboard or /company/dashboard based on role

ðŸ“„ src/pages/auth/SignUpUserPage.jsx (MODIFIED)
  Before: Direct fetch to backend
  After: Uses apiFetch() and saveSession()
  Changes:
    - Import apiFetch and saveSession
    - Call apiFetch('/auth/register/user', { method: 'POST', body: {...} })
    - Auto-save session and redirect

ðŸ“„ src/pages/auth/SignUpCompanyPage.jsx (MODIFIED)
  Before: Direct fetch to backend
  After: Uses apiFetch() and saveSession()
  Changes:
    - Same as SignUpUserPage but for companies

ðŸ“„ src/App.jsx (MODIFIED)
  Before: Routes unprotected
  After: All private routes wrapped with <ProtectedRoute>
  Changes:
    - Import ProtectedRoute
    - Wrap all /user/* and /company/* routes

ðŸ“„ src/pages/user/UserDashboard.jsx (REDESIGNED)
  Before: Inline styles, manual token handling
  After: Tailwind CSS, uses apiFetch() and logout()
  Changes:
    - Professional card layout with Tailwind
    - Quick actions grid
    - Uses apiFetch('/users/profile') for data
    - Logout button with useNavigate

ðŸ“„ src/pages/user/Profile.jsx (INTEGRATED)
  Before: Empty placeholder
  After: Full CRUD for Person profiles
  Features:
    - Form for firstName, lastName, birthYear, highSchool, description, cv
    - Auto-loads existing profile
    - Auto-switches between create/edit mode
    - Success/error messages

ðŸ“„ src/pages/user/Courses.jsx (INTEGRATED)
  Before: Static mock data
  After: Fetches from GET /api/course/
  Features:
    - Grid of CourseCard components
    - Loading state
    - Empty state
    - Error handling

ðŸ“„ src/pages/user/Company.jsx (INTEGRATED)
  Before: Empty placeholder
  After: Lists all companies from backend
  Features:
    - Grid layout with company cards
    - Shows name, RUT, legal info
    - Responsive design

ðŸ“„ src/pages/user/Contact.jsx (STYLED)
  Before: Empty placeholder
  After: Professional UI with "Coming Soon"
  Features:
    - Tailwind styled interface
    - Placeholder for future messaging system

ðŸ“„ src/pages/company/CompanyDashboard.jsx (REDESIGNED)
  Before: Inline styles
  After: Tailwind CSS, integrated with backend
  Features:
    - Stats cards
    - Quick actions
    - Professional design

ðŸ“„ src/pages/company/Profile.jsx (INTEGRATED)
  Before: Empty placeholder
  After: Full CRUD for Company profiles
  Features:
    - Form for RUT, name, legalReason, groupName, subGroupName
    - Auto-loads existing profile
    - Auto-switches between create/edit mode

ðŸ“„ src/pages/company/Courses.jsx (INTEGRATED)
  Before: Empty placeholder
  After: Lists courses with CRUD buttons
  Features:
    - Fetches from GET /api/course/
    - Buttons for Create/Edit/Delete (alerts for now)
    - Grid layout

ðŸ“„ src/pages/company/Users.jsx (STYLED)
  Before: Empty placeholder
  After: Professional UI with "Coming Soon"
  Note: No backend endpoint exists yet for listing users

ðŸ“„ src/pages/company/Contact.jsx (STYLED)
  Before: Empty placeholder
  After: Professional UI with "Coming Soon"

BACKEND CHANGES:
----------------

ðŸ“„ docker-compose.yml (NEW FILE)
  What: Docker configuration for MySQL 8.0
  Why: Easy database setup without manual MySQL installation
  Content:
    - Image: mysql:8.0
    - Container name: jobee-mysql
    - Database: proyecto
    - User: proyectousuario / Password: proyectousuario
    - Port: 3306 (mapped to localhost)
    - Volume: mysql_data (persistent storage)
  Commands:
    docker-compose up -d    # Start MySQL
    docker-compose down     # Stop MySQL
    docker-compose ps       # Check status

ðŸ“„ config/db.js (MODIFIED)
  Before: Only exported Prisma client
  After: Exports both Prisma client AND mysql2 pool
  Why: Backend has mixed code - some uses Prisma, some uses raw SQL
  Changes:
    - Import mysql2/promise
    - Create connection pool with credentials
    - Export pool as named export
    - Export prisma as default export
  Result:
    - Prisma-based services (Person, Company, User) use default import
    - Legacy SQL services (Course) use named import { pool }

ðŸ“„ services/courseService.js (MODIFIED)
  Before: import db from '../config/db.js' (didn't work)
  After: import { pool } from '../config/db.js'
  Why: Legacy code uses db.query() which needs mysql2 pool
  Changes:
    - Changed import to { pool }
    - Changed db.query() to pool.query()
    - Changed table name from "cursos" to "Course" (Prisma naming)
  Note: This file should eventually be refactored to use Prisma

ðŸ“„ package.json (MODIFIED)
  Added: "mysql2": "^3.15.2"
  Why: Needed for raw SQL queries in legacy code

DATABASE:
---------

Tables Created (13 total):
  - User: Authentication (email, password, role)
  - Person: User profiles
  - Company: Company profiles
  - Course: Training courses
  - Purchase: Course enrollments
  - Chat, Message, Contact: Messaging system
  - Post, Comment, Like: Social features
  - Image: Image uploads
  - Admin: System administrators

Command used: npx prisma db push

================================================================================
4. HOW TO RUN THE FULL STACK
================================================================================

STEP-BY-STEP FOR BEGINNERS:
----------------------------

Prerequisites:
  âœ“ Node.js 18+ installed
  âœ“ Docker Desktop installed and running
  âœ“ Terminal/command line access

STEP 1: Start MySQL Database
  cd /Users/ingenioususer/Desktop/jobee-backend
  docker-compose up -d

  What this does: Starts MySQL 8.0 in a Docker container
  Expected output: "Container jobee-mysql started"

STEP 2: Start Backend Server
  cd /Users/ingenioususer/Desktop/jobee-backend
  npm install                  # Only needed first time
  npm run dev

  What this does: Starts Express server on port 3000
  Expected output:
    "Servidor corriendo en puerto 3000"
    "MySQL conectado con Prisma"

  Troubleshooting:
    - If port 3000 is busy: kill the process or change PORT in .env
    - If MySQL connection fails: make sure Docker container is running

STEP 3: Start Frontend Server
  # Open NEW terminal window
  cd /Users/ingenioususer/Desktop/jobee-frontend
  npm install                  # Only needed first time
  npm run dev

  What this does: Starts Vite dev server on port 5173
  Expected output: "Local: http://localhost:5173/"

STEP 4: Open in Browser
  Navigate to: http://localhost:5173

You should see the Jobee landing page. You're ready to test!

STOPPING EVERYTHING:
  - Frontend: Ctrl+C in terminal
  - Backend: Ctrl+C in terminal
  - MySQL: docker-compose down (in backend folder)

================================================================================
5. TESTING THE INTEGRATION
================================================================================

COMPLETE TEST FLOW:
-------------------

TEST 1: User Registration and Profile
  1. Go to http://localhost:5173/auth/signup/user
  2. Fill form:
     - Name: Test User
     - Email: testuser@example.com
     - Password: Test123
  3. Click "Crear cuenta"
  4. Should redirect to /user/dashboard
  5. See user email displayed in dashboard
  6. Go to /user/profile
  7. Fill Person form:
     - First Name: John
     - Last Name: Doe
     - Birth Year: 2000
     - High School: Example High School
     - Description: Looking for first job
  8. Click "Save Profile"
  9. See success message
  10. Refresh page - data should persist

TEST 2: Company Registration and Profile
  1. Logout from user account
  2. Go to /auth/signup/company
  3. Fill form:
     - Name: Test Company
     - Email: testcompany@example.com
     - Password: Test123
  4. Click "Crear cuenta"
  5. Should redirect to /company/dashboard
  6. Go to /company/profile
  7. Fill Company form:
     - RUT: 123456789
     - Name: Tech Startup Inc
     - Legal Reason: Tech Startup Inc SRL
     - Group Name: Technology
     - Sub Group Name: Software Development
  8. Click "Save Profile"
  9. See success message

TEST 3: View Courses (Both User and Company)
  1. As user: go to /user/courses
  2. Should see empty state (no courses yet)
  3. As company: go to /company/courses
  4. Should see same list with CRUD buttons

TEST 4: View Companies List (User)
  1. Login as user
  2. Go to /user/company
  3. Should see "Test Company" in the grid
  4. Should show all company details

TEST 5: Logout and Route Protection
  1. Click logout button
  2. Try to access /user/dashboard directly
  3. Should redirect to /auth/login
  4. Login again - should work

EXPECTED BEHAVIORS:
  âœ… All forms submit successfully
  âœ… Data persists in database (survives page refresh)
  âœ… Protected routes redirect to login when no token
  âœ… Navigation works across all pages
  âœ… Loading states appear during API calls
  âœ… Error messages show on API failures

================================================================================
6. FUTURE IMPROVEMENTS
================================================================================

PRIORITY HIGH:
--------------
1. Course CRUD Implementation
   - Create course form in CompanyCourses
   - Edit course modal
   - Delete confirmation
   - Backend endpoints already exist

2. Course Enrollment System
   - "Enroll" button functionality in UserCourses
   - Purchase record creation
   - Enrolled courses view for users

PRIORITY MEDIUM:
----------------
3. Candidate Listing (CompanyUsers)
   - Backend: Create GET /api/person/ endpoint
   - Frontend: Integrate in CompanyUsers page
   - Add search and filters

4. Messaging System
   - Backend: Implement Chat/Message endpoints
   - Frontend: Real-time messaging UI
   - Contact list
   - Message threads

PRIORITY LOW:
-------------
5. UX Improvements
   - Loading skeletons instead of "Loading..."
   - Toast notifications for success/error
   - Modal confirmations for destructive actions
   - Pagination for large lists
   - Form validation improvements

6. Performance
   - Image optimization
   - Code splitting
   - Lazy loading routes
   - API response caching

7. Security
   - Rate limiting on backend
   - Input sanitization
   - HTTPS in production
   - Refresh token implementation

================================================================================
END OF INTEGRATION GUIDE
================================================================================

For questions or issues, refer to:
- Frontend README: jobee-frontend/README.md
- Backend README: jobee-backend/README.md
- Prisma schema: jobee-backend/prisma/schema.prisma

Contact: animajobee@gmail.com
